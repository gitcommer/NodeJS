22 May 2020
https://www.youtube.com/watch?v=voDummz1gO0&t=400s
https://github.com/CodAffection/Node.js-Expess-MongoDB-CRUD

NOTES
1.INSTALL NEEDED PACKAGES
2.SETUP DATABASE
9.DISPLAY or (route) SAMPLE TEXT TO PAGE
10.mainLayout.hbs or home page, bootstrap
   display html-hbs or handlebars
   display html file to .hbs module like {{{body}}} mao ranan iyang code
   display variable to .hbs module like <h3>{{viewTitle}}</h3> mao ranan iyang code
11.insert forms to db - redirect to list
  convert to json the form data
  submit forms without input and log hi to console
  insert to forms and display data to console
  action="/employee" (if wla ni siya data will display to url)
  note: para dali ra pag edit, i highlight ra ang name="" sa forms sa kada page
12.DISPLAY DATA FROM THE DATABASE - display-db-data - display db data to forms in the list page
                                  - link - localhost:3000/employee
                                  - when click list display specific id

NOTES
--------------------------------------------------------------------------------
- create crud operation using node, express and mongodb
- forms - <form action="/employee" method="POST" autocomplete="off">, autocomplete="off" para dili mogawas ang mga cash input
        - <form autocomplete="off">, if you use this data will diplay in the url
- mongoose module - connect your app to mongodb
- links - <h3><a class="btn btn-secondary" href="/employee"><i class="fa fa-plus"></i> Create New</a> Employee List</h3>
- view list - <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>
- controller - siya mag boot unsa ang i display, html ba or data sa crud operation etc.
- handlebars - user to create html files
- {{{}}} - this is use to display html to .hbs data like {{{body}}}
- {{}} - this is use to display variable data in .hbs like {{viewTitle}}
- app.js or server.js - home page or diri simbolon tanan module like nav, body, variable data, etc.

1.INSTALL NEEDED PACKAGES
--------------------------------------------------------------------------------
- project> npm init (entry point: server.js)                                                  //install only this if nag sugod dyud ka og new project
- npm i --s express@4.17.1 mongoose@5.9.15 express-handlebars@4.0.4 body-parser@1.19.0        //i(install), --s(save), mongoose@5.3.4(version)

- create this file in the desktop                                                             //create this on notepad and run
  Start MongoDB.bat - cd C:\Program Files\MongoDB\Server\4.2\bin
                      mongod.exe --dbpath C:\Users\comme\mongo-data

2.SETUP DATABASE
--------------------------------------------------------------------------------
note: - first you need to "install mongodb and mongodb compass"
      - this is the same in pasting path in environment variables

1.download mongodb community
    - C:\Program Files\MongoDB\Server\3.6\bin                                               //paste this to "environment variables"
    - cmd> mongo                                                                            //to check if installed
2.download mongodb compass (run as administrator)

3.create database: database name: EmployeeDB
                   table or collection name: employees

4.connect to MongoDB
- project/models/db.js                                                                                    //database connection

    const mongoose = require('mongoose');                                                                 //use mongoose to connect to db

    mongoose.connect('mongodb://localhost:27017/EmployeeDB', { useNewUrlParser: true }, (err) => {        //EmployeeDB mao rani i check nimo diri
        if (!err) { console.log('MongoDB Connection Succeeded.') }
        else { console.log('Error in DB connection : ' + err) }
    });

    require('./employee.model');                                                                          //models/employee.model.js - schema

5.project/server.js                                                                           //same as app.js

    require('./models/db');                                                                   //1models/db.js - connect to db

    const express = require('express');                                                       //2.use express module

    var app = express();                                                                      //3.call express function

    app.listen(3000, () => {                                                                  //4.run app localhost:3000
        console.log('Express server started at port : 3000');
    });

6.project/models/employee.model.js                                                            //schema or table set-up

    const mongoose = require('mongoose');

    var employeeSchema = new mongoose.Schema({                                                //table or collection
        fullName: {
            type: String,
            required: 'This field is required.'
        },
        email: {
            type: String
        },
        mobile: {
            type: String
        },
        city: {
            type: String
        }
    });

    mongoose.model('Employee', employeeSchema);

7.run server: cmd> nodemon server.js
              localhost:3000, Cannot Get/ (meaning you don't have any routing created)

9.DISPLAY or (route) SAMPLE TEXT TO PAGE
--------------------------------------------------------------------------------
1.project/controllers/employeeController.js

    const express = require('express');                                             //1.route or link - express module
    var router = express.Router();                                                  //2.route or link - para maka route ka or link link

    router.get('/', (req, res) => {                                                 //3.route or link - '/' or display text in localhost:3000
        res.json('sample text');
    });

    module.exports = router;

2.project/server.js

    require('./models/db');                                                         //database connection

    const express = require('express');                                             //require express

    const employeeController = require('./controllers/employeeController');         //4.route or link - call the data of employeeController.js

    var app = express();                                                            //use express

    app.listen(3000, () => {                                                        //localhost:3000
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);                                       //5.route or link - i display ang data sa employeeController.js sa server.js

to run: http://localhost:3000/employee
output: sample text

10.mainLayout.hbs or home page, bootstrap
   display html-hbs or handlebars
   display html file to .hbs module like {{{body}}} mao ranan iyang code
   display variable to .hbs module like <h3>{{viewTitle}}</h3> mao ranan iyang code
--------------------------------------------------------------------------------
1.project/server.js

    require('./models/db');

    const express = require('express');
    const path = require('path');                                                                                               //using-handlebars - to use folder path or directory
    const exphbs = require('express-handlebars');                                                                               //using-handlebars - to use hbs

    const employeeController = require('./controllers/employeeController');                                                     //1.html-hbs - call employeeController.js
                                                                                                                                             - ang data niya kay si addOrEdit.hbs and <h3>{{viewTitle}}</h3>
    var app = express();
                                                                                                                               //2.html-hbs - this is the format and code in displaying html.hbs like (mainLayout.hbs)
    app.set('views', path.join(__dirname, '/views/'));                                                                         //  using-handlebars - locate "views folder"
    app.engine('hbs', exphbs({ extname: 'hbs', defaultLayout: 'mainLayout', layoutsDir: __dirname + '/views/layouts/' }));     //  using-handlebars - this is like views/layouts/mainLayout.hbs
    app.set('view engine', 'hbs');                                                                                             //  using-handlebars - use the .hbs extension

    app.listen(3000, () => {
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);

2.project/controllers/employeeController.js

    const express = require('express');
    var router = express.Router();

    router.get('/', (req, res) => {                                                                                           //3.using-handlebars - call views/employee/addOrEdit.hbs
        res.render("employee/addOrEdit", {
            viewTitle: "Insert Employee"                                                                                      //1.displaying variable - viewTitle: "Insert Employee" is the <h3>{{viewTitle}}</h3> in addOrEdit.hbs
        });
    });

    module.exports = router;

3.project/views/layouts/mainLayout.hbs

    <html>
      <head>
          <title>Node.js express mongDB CRUD</title>
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
                integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
                crossorigin="anonymous">
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
      </head>

      <body class="bg-info">
          <div class="row">
              <div class="col-md-6 offset-md-3" style="background-color: #fff;margin-top: 25px;padding:20px;">
                  {{{body}}}                                                                                                  <!-- 2.display html file to .hbs - display here the [forms] of addOrEdit.hbs -->
              </div>
          </div>

      </body>
    </html>

3.project/views/employee/addOrEdit.hbs                                                                                        <!-- 1.display html file to .hbs -->

    <h3>{{viewTitle}}</h3>                                                                                                    <!-- 2.displaying variable -  - is the viewTitle: "Insert Employee" employeeController.js -->

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">
        <div class="form-group">
            <label>Full Name</label>
            <input type="text" class="form-control" name="fullName" placeholder="Full Name" value="{{employee.fullName}}">
            <div class="text-danger">
                {{employee.fullNameError}}</div>
        </div>
        <div class="form-group">
            <label>Email</label>
            <input type="text" class="form-control" name="email" placeholder="Email" value="{{employee.email}}">
            <div class="text-danger">
                {{employee.emailError}}</div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Mobile</label>
                <input type="text" class="form-control" name="mobile" placeholder="Mobile" value="{{employee.mobile}}">
            </div>
            <div class="form-group col-md-6">
                <label>City</label>
                <input type="text" class="form-control" name="city" placeholder="City" value="{{employee.city}}">
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-info"><i class="fa fa-database"></i> Submit</button>
            <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>
        </div>
    </form>

11.insert forms to db - redirect to list
   convert to json the form data
   submit forms without input and log hi to console
   insert to forms and display data to console
   action="/employee" (if wla ni siya data will display to url)
   note: para dali ra pag edit, i highlight ra ang name="" sa forms sa kada page
--------------------------------------------------------------------------------
1.project/views/employee/addOrEdit.hbs

    <form action="/employee" method="POST" autocomplete="off">                                                                    //1.insert forms to db - action="/employee" (if wla ni siya data will display to url)
                                                                                                                                                         - action hold the data of forms
2.project/server.js

    require('./models/db');

    const express = require('express');
    const path = require('path');
    const exphbs = require('express-handlebars');
    const bodyparser = require('body-parser');                                                                                    //2.insert forms to db - handlebars mao ni module sa forms

    const employeeController = require('./controllers/employeeController');

    var app = express();

    app.use(bodyparser.urlencoded({                                                                                               //3.insert forms to db - and convert to json the form data
        extended: true                                                                                                                                   - this will call the data of app.use('/employee', employeeController); in server.js
    }));
    app.use(bodyparser.json());                                                                                                   //3.insert forms to db - and convert to json the form data

    app.set('views', path.join(__dirname, '/views/'));
    app.engine('hbs', exphbs({ extname: 'hbs', defaultLayout: 'mainLayout', layoutsDir: __dirname + '/views/layouts/' }));
    app.set('view engine', 'hbs');

    app.listen(3000, () => {
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);

3.project/controllers/employeeController.js

    const express = require('express');
    var router = express.Router();
    const mongoose = require('mongoose');                                           //6.insert forms to db -
    const Employee = mongoose.model('Employee');                                    //7.insert forms to db - Employee is the schema copy in employee.model.js

    router.get('/', (req, res) => {
        res.render("employee/addOrEdit", {
            viewTitle: "Insert Employee"
        });
    });

    router.post('/', (req, res) => {
        //console.log('hi');                                                        //insert forms to db - submit forms without input and log hi to console
        //console.log('req.body');                                                  //insert forms to db - {{{body}}} or forms data, insert to forms and display data to console
        if (req.body._id == '')
            insertRecord(req, res);                                                 //5.insert forms to db - insertRecord(req, res); and function insertRecord(req, res) { is the [same] gibalhin ra
            else
            updateRecord(req, res);
    });

    function insertRecord(req, res) {                                               //4.insert forms to db - insert forms data to database
        var employee = new Employee();                                              //8.insert forms to db Employee() will call the db in const Employee = mongoose.model('Employee');
        employee.fullName = req.body.fullName;                                      //9.insert forms to db - forms field
        employee.email = req.body.email;
        employee.mobile = req.body.mobile;
        employee.city = req.body.city;
        employee.save((err, doc) => {                                               //10.insert forms to db - save to db with call back function to check err or doc
            if (!err)                                                               //11.insert forms to db - of no error redirect to employee/list.hbs
                res.redirect('employee/list');
            else {
                if (err.name == 'ValidationError') {                                //5.forms-validation - this will call the function handleValidationError(err, body) {
                    handleValidationError(err, req.body);
                    res.render("employee/addOrEdit", {
                        viewTitle: "Insert Employee",
                        employee: req.body
                    });
                }
                else
                    console.log('Error during record insertion : ' + err);          //3.forms-validation -  - forms validation error
            }
        });
    }

    router.get('/list', (req, res) => {                                             //12.insert forms to db - redirect to localhost:3000/employee/list
        //res.json('from list');                                                    //   test redirect
        Employee.find((err, docs) => {
            if (!err) {
                res.render("employee/list", {
                    list: docs
                });
            }
            else {
                console.log('Error in retrieving employee list :' + err);
            }
        });
    });

    function handleValidationError(err, body) {                                     //4.forms-validation -
        for (field in err.errors) {
            switch (err.errors[field].path) {
                case 'fullName':
                    body['fullNameError'] = err.errors[field].message;
                    break;
                case 'email':
                    body['emailError'] = err.errors[field].message;
                    break;
                default:
                    break;
            }
        }
    }

    module.exports = router;

12.FORMS VALIDATION - fullname validation
                    - email validation
                    - error when input is blank but still display the input of the other field
--------------------------------------------------------------------------------
1.project/models/employee.model.js

    const mongoose = require('mongoose');

    var employeeSchema = new mongoose.Schema({                                  //table or shema
        fullName: {
            type: String,
            required: 'This field is required.'                                 //1.forms-validation - this is the form validation for fullName
        },
        email: {
            type: String
        },
        mobile: {                                                               //no form validation
            type: String
        },
        city: {                                                                 //no form validation
            type: String
        }
    });

    Custom validation for email                                                 //2.forms-validation - this is the form validation for email
    employeeSchema.path('email').validate((val) => {
        emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return emailRegex.test(val);
    }, 'Invalid e-mail.');                                                      //2.forms-validation - this is the message of email validation

    mongoose.model('Employee', employeeSchema);

2.project/controllers/employeeController.js

      const express = require('express');
      var router = express.Router();
      const mongoose = require('mongoose');
      const Employee = mongoose.model('Employee');

      router.get('/', (req, res) => {
          res.render("employee/addOrEdit", {
              viewTitle: "Insert Employee"
          });
      });

      router.post('/', (req, res) => {
          //console.log('hi');
          //console.log('req.body');
          if (req.body._id == '')
              insertRecord(req, res);
              else
              updateRecord(req, res);
      });

      function insertRecord(req, res) {
          var employee = new Employee();
          employee.fullName = req.body.fullName;
          employee.email = req.body.email;
          employee.mobile = req.body.mobile;
          employee.city = req.body.city;
          employee.save((err, doc) => {                                               //5.forms-validation - err parameter
              if (!err)
                  res.redirect('employee/list');
              else {
                  if (err.name == 'ValidationError') {                                //5.forms-validation - name is the name="" in forms or the "function handleValidationError(err, body) {"
                      handleValidationError(err, req.body);                           //  body or forms
                      res.render("employee/addOrEdit", {                              //  send the error message to addOrEdit.hbs
                          viewTitle: "Insert Employee",                               //  error message
                          employee: req.body                                          //  display error to body or forms
                      });
                  }
                  else
                      console.log('Error during record insertion : ' + err);          //3.forms-validation - log form error to console
              }
          });
      }

      router.get('/list', (req, res) => {
          Employee.find((err, docs) => {
              if (!err) {
                  res.render("employee/list", {
                      list: docs
                  });
              }
              else {
                  console.log('Error in retrieving employee list :' + err);
              }
          });
      });

      function handleValidationError(err, body) {                                     //4.forms-validation -
          for (field in err.errors) {
              switch (err.errors[field].path) {
                  case 'fullName':
                      body['fullNameError'] = err.errors[field].message;
                      break;
                  case 'email':
                      body['emailError'] = err.errors[field].message;
                      break;
                  default:
                      break;
              }
          }
      }

      module.exports = router;

3.project/views/employee/addOrEdit.hbs

    <h3>{{viewTitle}}</h3>

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">
        <div class="form-group">
            <label>Full Name</label>
            <input type="text" class="form-control" name="fullName" placeholder="Full Name" value="{{employee.fullName}}">        <!-- 6.forms-validation - is the employee: req.body employeeController.js -->
            <div class="text-danger">                                                                                             <!-- 7.forms-validation - show error message here -->
                {{employee.fullNameError}}</div>                                                                                  <!-- 8.forms-validation - employee.fullNameError is found in employee.model.js -->
        </div>
        <div class="form-group">
            <label>Email</label>
            <input type="text" class="form-control" name="email" placeholder="Email" value="{{employee.email}}">
            <div class="text-danger">
                {{employee.emailError}}</div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Mobile</label>
                <input type="text" class="form-control" name="mobile" placeholder="Mobile" value="{{employee.mobile}}">
            </div>
            <div class="form-group col-md-6">
                <label>City</label>
                <input type="text" class="form-control" name="city" placeholder="City" value="{{employee.city}}">
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-info"><i class="fa fa-database"></i> Submit</button>
            <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>
        </div>
    </form>

12.DISPLAY DATA FROM THE DATABASE - display-db-data - display db data to forms in the list page
                                  - link - localhost:3000/employee
--------------------------------------------------------------------------------
1.project/controllers/employeeController.js

    router.get('/list', (req, res) => {                                             //1.display-db-data - localhost:3000/list
        //res.json('from list');                                                    //  sample display
        Employee.find((err, docs) => {                                              //2.display-db-data - Employee is the db, docs is all the data in the database
            if (!err) {                                                             //  if no error, display data to the list
                res.render("employee/list", {
                    list: docs                                                      //3.display-db-data - display data on the list, docs is the data in the database
                });
            }
            else {
                console.log('Error in retrieving employee list :' + err);
            }
        });
    });

2.project/views/employee/list.hbs

    <h3><a class="btn btn-secondary" href="/employee"><i class="fa fa-plus"></i> Create New</a> Employee List</h3>      <!-- 1.link - localhost:3000/employee -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Mobile</th>
                <th>City</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            {{#each list}}                                                      <!-- 4.display-db-data - is like foreach open -->
            <tr>
                <td>{{this.fullName}}</td>                                      <!-- 4.display-db-data -->
                <td>{{this.email}}</td>
                <td>{{this.mobile}}</td>
                <td>{{this.city}}</td>
                <td>
                    <a href="/employee/{{this._id}}"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>
                    <a href="/employee/delete/{{this._id}}" onclick="return confirm('Are you sure to delete this record ?');"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>
                </td>
            </tr>
            {{/each}}                                                           <!-- 4.display-db-data - is like foreach close -->
        </tbody>
    </table>

3.project/views/employee/addOrEdit.hbs

    <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>      <!-- 2.link - localhost:3000/employee/list -->

13.EDIT and UPDATE - getting specific id
                   - update
                   - redirect
--------------------------------------------------------------------------------
1.views/employee/list.hbs

    <a href="/employee/{{this._id}}"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>        //1.getting specific id - _id is the id format in the database

2.controllers/employeeController.js

    router.post('/', (req, res) => {
        //console.log('hi');
        //console.log('req.body');
        if (req.body._id == '')
            insertRecord(req, res);
            else
            updateRecord(req, res);                                                                   //1.update - this will check if the request is insert or update
    });

    function updateRecord(req, res) {                                                                 //2.update - this will update the record when forms submit
        Employee.findOneAndUpdate({ _id: req.body._id }, req.body, { new: true }, (err, doc) => {     //2.update - this is the function to update
            if (!err) { res.redirect('employee/list'); }
            else {
                if (err.name == 'ValidationError') {
                    handleValidationError(err, req.body);
                    res.render("employee/addOrEdit", {
                        viewTitle: 'Update Employee',
                        employee: req.body
                    });
                }
                else
                    console.log('Error during record update : ' + err);
            }
        });
    }

    router.get('/:id', (req, res) => {
        Employee.findById(req.params.id, (err, doc) => {                        //2.getting specific id - find specific id in the database
            if (!err) {
                res.render("employee/addOrEdit", {                              //2.getting specific id - display id data to forms
                    viewTitle: "Update Employee",
                    employee: doc                                               //2.getting specific id - doc is the data in database
                });
            }
        });
    });

3.views/employee/addOrEdit.hbs
note: when you inspect element the forms you will see the id store

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">               //3.getting specific id - store id in hidden

4.views/employee/list.hbs

    <a href="/employee/{{this._id}}"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>                                                                              //4.getting specific id - this._id
    <a href="/employee/delete/{{this._id}}" onclick="return confirm('Are you sure to delete this record ?');"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>      //4.getting specific id - this._id

13.DELETE - delte
          - alert message
--------------------------------------------------------------------------------
1.views/employee/list.hbs

    <a href="/employee/delete/{{this._id}}" onclick="return confirm('Are you sure to delete this record ?');"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>      //1.alert message

2.controllers/employeeController.js

    router.post('/', (req, res) => {
        //console.log('hi');
        //console.log('req.body');
        if (req.body._id == '')
            insertRecord(req, res);
            else
            updateRecord(req, res);
    });

    router.get('/delete/:id', (req, res) => {                                   //1.delete -
        Employee.findByIdAndRemove(req.params.id, (err, doc) => {
            if (!err) {
                res.redirect('/employee/list');
            }
            else { console.log('Error in employee delete :' + err); }
        });
    });

    router.get('/:id', (req, res) => {
        Employee.findById(req.params.id, (err, doc) => {
            if (!err) {
                res.render("employee/addOrEdit", {
                    viewTitle: "Update Employee",
                    employee: doc
                });
            }
        });
    });
