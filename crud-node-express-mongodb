22 May 2020
https://www.youtube.com/watch?v=voDummz1gO0&t=400s
https://github.com/CodAffection/Node.js-Expess-MongoDB-CRUD

NOTES
9.TEST ROUTE or DISPLAY SIMPLE TEXT
10.DISPLAY html forms using .hbs or handlebars module
11.INSERT FORMS DATA TO MongoDB
12.DISPLAY DATA FROM THE DATABASE

NOTES
--------------------------------------------------------------------------------
- create crud operation using node, express and mongodb
- forms - <form action="/employee" method="POST" autocomplete="off">, autocomplete="off" para dili mogawas ang mga cash input
        - <form autocomplete="off">, if you use this data will diplay in the url
- mongoose module - is use in forms activity like cruds, validation etc.
- links - <h3><a class="btn btn-secondary" href="/employee"><i class="fa fa-plus"></i> Create New</a> Employee List</h3>
- view list - <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>

1.project> npm init (entry point: server.js)                                                  //package.json
2.npm i --s express@4.17.1 mongoose@5.9.15 express-handlebars@4.0.4 body-parser@1.19.0        //i(install), --s(save), mongoose@5.3.4(version)

3.create this file in the desktop                                                             //create this on notepad and run
  Start MongoDB.bat - cd C:\Program Files\MongoDB\Server\4.2\bin
                      mongod.exe --dbpath C:\Users\comme\mongo-data

  note: - first you need to "install mongodb and mongodb compass"
        - this is the same in pasting path in environment variables

4.setting-up database
    1.download mongodb community
        - C:\Program Files\MongoDB\Server\3.6\bin                                             //paste this to "environment variables"
        - cmd> mongo                                                                          //to check if installed
    2.download mongodb compass (run as administrator)

create database: database name: EmployeeDB
                 table or collection name: employees

5.connect to MongoDB
- project/models/db.js                                                                                    //database connection

    const mongoose = require('mongoose');

    mongoose.connect('mongodb://localhost:27017/EmployeeDB', { useNewUrlParser: true }, (err) => {        //EmployeeDB is the db name
        if (!err) { console.log('MongoDB Connection Succeeded.') }
        else { console.log('Error in DB connection : ' + err) }
    });

    require('./employee.model');

6.project/server.js                                                                           //same as app.js

    require('./models/db');                                                                   //models/db.js

    const express = require('express');                                                       //1.express - module

    var app = express();                                                                      //2.express - use express module

    app.listen(3000, () => {                                                                  //3.express - listen to server or localhost:3000
        console.log('Express server started at port : 3000');
    });

7.project/models/employee.model.js                                                            //schema or table set-up

    const mongoose = require('mongoose');

    var employeeSchema = new mongoose.Schema({        //table
        fullName: {
            type: String,
            required: 'This field is required.'
        },
        email: {
            type: String
        },
        mobile: {
            type: String
        },
        city: {
            type: String
        }
    });

    mongoose.model('Employee', employeeSchema);

8.run server: cmd> nodemon server.js
              localhost:3000, Cannot Get/ (meaning you don't have any routing created)

9.TEST ROUTE or DISPLAY SIMPLE TEXT
--------------------------------------------------------------------------------
1.project/controllers/employeeController.js

    const express = require('express');                                             //express module
    var router = express.Router();                                                  //1.router - use router

    router.get('/', (req, res) => {
        res.json('sample text');
    });

    module.exports = router;

2.project/server.js

    require('./models/db');                                                         //models/db.js

    const express = require('express');                                             //1.express - module

    const employeeController = require('./controllers/employeeController');         //1.test-route

    var app = express();                                                            //2.express - use express module

    app.listen(3000, () => {                                                        //3.express - listen to server or localhost:3000
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);                                       //2.test-route

to run: http://localhost:3000/employee
output: sample text

10.DISPLAY html forms using .hbs or handlebars module
--------------------------------------------------------------------------------
1.project/server.js

    require('./models/db');

    const express = require('express');
    const path = require('path');                                                                                               //1.using-handlebars - to use folder path or directory
    const exphbs = require('express-handlebars');                                                                               //2.using-handlebars - to use hbs

    const employeeController = require('./controllers/employeeController');

    var app = express();

    app.set('views', path.join(__dirname, '/views/'));                                                                         //3.using-handlebars - locate "views folder"
    app.engine('hbs', exphbs({ extname: 'hbs', defaultLayout: 'mainLayout', layoutsDir: __dirname + '/views/layouts/' }));     //4.using-handlebars - this is like views/layouts/mainLayout.hbs
    app.set('view engine', 'hbs');                                                                                             //5.using-handlebars - use the .hbs extension

    app.listen(3000, () => {
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);

2.project/controllers/employeeController.js

    const express = require('express');
    var router = express.Router();

    router.get('/', (req, res) => {                                                                                           //6.using-handlebars - views/employee/addOrEdit.hbs
        res.render("employee/addOrEdit", {
            viewTitle: "Insert Employee"                                                                                      //  viewTitle: "Insert Employee" is the <h3>{{viewTitle}}</h3> in addOrEdit.hbs
        });
    });

    module.exports = router;

3.project/views/layouts/mainLayout.hbs

    <html>
      <head>
          <title>Node.js express mongDB CRUD</title>
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
                integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO"
                crossorigin="anonymous">
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
      </head>

      <body class="bg-info">
          <div class="row">
              <div class="col-md-6 offset-md-3" style="background-color: #fff;margin-top: 25px;padding:20px;">
                  {{{body}}}                                                                                                  <!-- //7.using-handlebars - display here the forms of addOrEdit.hbs -->
              </div>
          </div>

      </body>
    </html>

3.project/views/employee/addOrEdit.hbs

    <h3>{{viewTitle}}</h3>                                                                                                    <!-- //8.using-handlebars - is the viewTitle: "Insert Employee" employeeController.js -->

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">
        <div class="form-group">
            <label>Full Name</label>
            <input type="text" class="form-control" name="fullName" placeholder="Full Name" value="{{employee.fullName}}">
            <div class="text-danger">
                {{employee.fullNameError}}</div>
        </div>
        <div class="form-group">
            <label>Email</label>
            <input type="text" class="form-control" name="email" placeholder="Email" value="{{employee.email}}">
            <div class="text-danger">
                {{employee.emailError}}</div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Mobile</label>
                <input type="text" class="form-control" name="mobile" placeholder="Mobile" value="{{employee.mobile}}">
            </div>
            <div class="form-group col-md-6">
                <label>City</label>
                <input type="text" class="form-control" name="city" placeholder="City" value="{{employee.city}}">
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-info"><i class="fa fa-database"></i> Submit</button>
            <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>
        </div>
    </form>

11.INSERT FORMS DATA TO MongoDB
--------------------------------------------------------------------------------
1.project/views/employee/addOrEdit.hbs

    <form action="/employee" method="POST" autocomplete="off">

2.project/server.js

    require('./models/db');

    const express = require('express');
    const path = require('path');
    const exphbs = require('express-handlebars');
    const bodyparser = require('body-parser');                                                                                    //1.post-or-insert - use bodyparser

    const employeeController = require('./controllers/employeeController');

    var app = express();

    app.use(bodyparser.urlencoded({                                                                                               //2.post-or-insert - get form data
        extended: true
    }));
    app.use(bodyparser.json());                                                                                                   //3.post-or-insert - and convert to json

    app.set('views', path.join(__dirname, '/views/'));
    app.engine('hbs', exphbs({ extname: 'hbs', defaultLayout: 'mainLayout', layoutsDir: __dirname + '/views/layouts/' }));
    app.set('view engine', 'hbs');

    app.listen(3000, () => {
        console.log('Express server started at port : 3000');
    });

    app.use('/employee', employeeController);

3.project/controllers/employeeController.js

    const express = require('express');
    var router = express.Router();
    const mongoose = require('mongoose');                                           //1.post-or-insert - mongoose is use to interact in mongo database
    const Employee = mongoose.model('Employee');                                    //2.post-or-insert - Employee is the database

    router.get('/', (req, res) => {
        res.render("employee/addOrEdit", {
            viewTitle: "Insert Employee"
        });
    });

    router.post('/', (req, res) => {
        //console.log('hi');                                                        //3.post-or-insert - insert to forms and display data to console
        //console.log('req.body');                                                  //4.post-or-insert - body or forms data, insert to forms and display data to console
        if (req.body._id == '')
            insertRecord(req, res);
            else
            updateRecord(req, res);
    });

    function insertRecord(req, res) {                                               //5.post-or-insert - insert forms data to database
        var employee = new Employee();                                              //6.post-or-insert - Employee() will call the db in const Employee = mongoose.model('Employee');
        employee.fullName = req.body.fullName;                                      //7.post-or-insert - forms field
        employee.email = req.body.email;
        employee.mobile = req.body.mobile;
        employee.city = req.body.city;
        employee.save((err, doc) => {                                               //8.post-or-insert - save
            if (!err)                                                               //9.post-or-insert - of no error redirect to list
                res.redirect('employee/list');
            else {
                if (err.name == 'ValidationError') {                                //5.forms-validation - this will call the function handleValidationError(err, body) {
                    handleValidationError(err, req.body);
                    res.render("employee/addOrEdit", {
                        viewTitle: "Insert Employee",
                        employee: req.body
                    });
                }
                else
                    console.log('Error during record insertion : ' + err);          //3.forms-validation -  - forms validation error
            }
        });
    }

    router.get('/list', (req, res) => {
        Employee.find((err, docs) => {
            if (!err) {
                res.render("employee/list", {
                    list: docs
                });
            }
            else {
                console.log('Error in retrieving employee list :' + err);
            }
        });
    });

    function handleValidationError(err, body) {                                     //4.forms-validation -
        for (field in err.errors) {
            switch (err.errors[field].path) {
                case 'fullName':
                    body['fullNameError'] = err.errors[field].message;
                    break;
                case 'email':
                    body['emailError'] = err.errors[field].message;
                    break;
                default:
                    break;
            }
        }
    }

    module.exports = router;

12.FORMS VALIDATION
--------------------------------------------------------------------------------
1.project/models/employee.model.js

    const mongoose = require('mongoose');

    var employeeSchema = new mongoose.Schema({                                  //table or shema
        fullName: {
            type: String,
            required: 'This field is required.'                                 //1.forms-validation -
        },
        email: {
            type: String
        },
        mobile: {
            type: String
        },
        city: {
            type: String
        }
    });

    Custom validation for email                                                 //2.forms-validation - track error character in email
    employeeSchema.path('email').validate((val) => {
        emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return emailRegex.test(val);
    }, 'Invalid e-mail.');

    mongoose.model('Employee', employeeSchema);

2.project/controllers/employeeController.js

      const express = require('express');
      var router = express.Router();
      const mongoose = require('mongoose');
      const Employee = mongoose.model('Employee');

      router.get('/', (req, res) => {
          res.render("employee/addOrEdit", {
              viewTitle: "Insert Employee"
          });
      });

      router.post('/', (req, res) => {
          //console.log('hi');
          //console.log('req.body');
          if (req.body._id == '')
              insertRecord(req, res);
              else
              updateRecord(req, res);
      });

      function insertRecord(req, res) {
          var employee = new Employee();
          employee.fullName = req.body.fullName;
          employee.email = req.body.email;
          employee.mobile = req.body.mobile;
          employee.city = req.body.city;
          employee.save((err, doc) => {
              if (!err)
                  res.redirect('employee/list');
              else {
                  if (err.name == 'ValidationError') {                                //5.forms-validation - this will call the function handleValidationError(err, body) {
                      handleValidationError(err, req.body);
                      res.render("employee/addOrEdit", {
                          viewTitle: "Insert Employee",
                          employee: req.body
                      });
                  }
                  else
                      console.log('Error during record insertion : ' + err);          //3.forms-validation -  - forms validation error
              }
          });
      }

      router.get('/list', (req, res) => {
          Employee.find((err, docs) => {
              if (!err) {
                  res.render("employee/list", {
                      list: docs
                  });
              }
              else {
                  console.log('Error in retrieving employee list :' + err);
              }
          });
      });

      function handleValidationError(err, body) {                                     //4.forms-validation -
          for (field in err.errors) {
              switch (err.errors[field].path) {
                  case 'fullName':
                      body['fullNameError'] = err.errors[field].message;
                      break;
                  case 'email':
                      body['emailError'] = err.errors[field].message;
                      break;
                  default:
                      break;
              }
          }
      }

      module.exports = router;

3.project/views/employee/addOrEdit.hbs

    <h3>{{viewTitle}}</h3>

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">
        <div class="form-group">
            <label>Full Name</label>
            <input type="text" class="form-control" name="fullName" placeholder="Full Name" value="{{employee.fullName}}">        <!-- 6.forms-validation - is the employee: req.body employeeController.js -->
            <div class="text-danger">                                                                                             <!-- 7.forms-validation - show error message here -->
                {{employee.fullNameError}}</div>                                                                                  <!-- 8.forms-validation - employee.fullNameError is found in employee.model.js -->
        </div>
        <div class="form-group">
            <label>Email</label>
            <input type="text" class="form-control" name="email" placeholder="Email" value="{{employee.email}}">
            <div class="text-danger">
                {{employee.emailError}}</div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label>Mobile</label>
                <input type="text" class="form-control" name="mobile" placeholder="Mobile" value="{{employee.mobile}}">
            </div>
            <div class="form-group col-md-6">
                <label>City</label>
                <input type="text" class="form-control" name="city" placeholder="City" value="{{employee.city}}">
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-info"><i class="fa fa-database"></i> Submit</button>
            <a class="btn btn-secondary" href="/employee/list"><i class="fa fa-list-alt"></i> View All</a>
        </div>
    </form>

12.DISPLAY DATA FROM THE DATABASE
--------------------------------------------------------------------------------
1.project/controllers/employeeController.js

    router.get('/list', (req, res) => {                                             //1.display-db-data - localhost:3000/list
        Employee.find((err, docs) => {                                              //2.display-db-data - Employee is the db
            if (!err) {
                res.render("employee/list", {
                    list: docs                                                      //3.display-db-data - docs is the data
                });
            }
            else {
                console.log('Error in retrieving employee list :' + err);
            }
        });
    });

2.project/views/employee/list.hbs

    <h3><a class="btn btn-secondary" href="/employee"><i class="fa fa-plus"></i> Create New</a> Employee List</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Mobile</th>
                <th>City</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            {{#each list}}
            <tr>
                <td>{{this.fullName}}</td>        <!-- //4.display-db-data -  -->
                <td>{{this.email}}</td>
                <td>{{this.mobile}}</td>
                <td>{{this.city}}</td>
                <td>
                    <a href="/employee/{{this._id}}"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>
                    <a href="/employee/delete/{{this._id}}" onclick="return confirm('Are you sure to delete this record ?');"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>
                </td>
            </tr>
            {{/each}}
        </tbody>
    </table>

13.EDIT
--------------------------------------------------------------------------------
1.views/employee/list.hbs

    <a href="/employee/{{this._id}}"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>

2.controllers/employeeController.js

    router.post('/', (req, res) => {
        //console.log('hi');
        //console.log('req.body');
        if (req.body._id == '')
            insertRecord(req, res);
            else
            updateRecord(req, res);                                                                   //the will get the forms data
    });

    function updateRecord(req, res) {                                                                 //this will update the record when forms submit
        Employee.findOneAndUpdate({ _id: req.body._id }, req.body, { new: true }, (err, doc) => {
            if (!err) { res.redirect('employee/list'); }
            else {
                if (err.name == 'ValidationError') {
                    handleValidationError(err, req.body);
                    res.render("employee/addOrEdit", {
                        viewTitle: 'Update Employee',
                        employee: req.body
                    });
                }
                else
                    console.log('Error during record update : ' + err);
            }
        });
    }

    router.get('/:id', (req, res) => {
        Employee.findById(req.params.id, (err, doc) => {
            if (!err) {
                res.render("employee/addOrEdit", {
                    viewTitle: "Update Employee",
                    employee: doc                                                                     //employee: doc - doc is the data in database
                });
            }
        });
    });

3.views/employee/addOrEdit.hbs
note: when you inspect element the forms you will see the id store

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">                                     //hidden id store here

13.DELETE
--------------------------------------------------------------------------------
1.views/employee/list.hbs

    <a href="/employee/delete/{{this._id}}" onclick="return confirm('Are you sure to delete this record ?');"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>

2.controllers/employeeController.js

    router.post('/', (req, res) => {
        //console.log('hi');
        //console.log('req.body');
        if (req.body._id == '')
            insertRecord(req, res);
            else
            updateRecord(req, res);                                                                   //the will get the forms data
    });

    router.get('/delete/:id', (req, res) => {
        Employee.findByIdAndRemove(req.params.id, (err, doc) => {
            if (!err) {
                res.redirect('/employee/list');
            }
            else { console.log('Error in employee delete :' + err); }
        });
    });

    router.get('/:id', (req, res) => {
        Employee.findById(req.params.id, (err, doc) => {
            if (!err) {
                res.render("employee/addOrEdit", {
                    viewTitle: "Update Employee",
                    employee: doc                                                                     //employee: doc - doc is the data in database
                });
            }
        });
    });

3.views/employee/addOrEdit.hbs
note: when you inspect element the forms you will see the id store

    <form action="/employee" method="POST" autocomplete="off">
        <input type="hidden" name="_id" value="{{employee._id}}">                                     //hidden id store here
